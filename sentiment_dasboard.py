# -*- coding: utf-8 -*-
"""Sentiment Dasboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g2LmEQ5IX8dEqeGrJrCOju7dXpEy023W
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import tokenizer_from_json
import json

from utils import show_game_description, show_sentiment_charts, show_wordclouds, analyze_user_input

model = load_model("Model/sentiment_model.keras")
with open("Model/tokenizer_lstm.json") as f:
    tokenizer_json = json.load(f)
tokenizer = tokenizer_from_json(tokenizer_json)

st.sidebar.title("ðŸ“Š Dashboard Sentimen Komentar")
game_choice = st.sidebar.selectbox("ðŸŽ® Pilih Game", ["Genshin Impact", "Wuthering Waves"])
section = st.sidebar.radio("ðŸ“Œ Pilih Section", ["Section 1: Analisa", "Section 2: Word Cloud", "Section 3: Uji Coba Model"])

if game_choice == "Genshin Impact":
    df = pd.read_csv("Data/Sentiment_Genshin.csv")
else:
    df = pd.read_csv("Data/Sentiment_Wuthering.csv")

st.title("Analisis Sentimen Komentar Game ðŸŽ®")
st.markdown("""
Teknologi yang Digunakan

Apa itu LSTM?

LSTM (Long Short-Term Memory) adalah jenis jaringan saraf tiruan berbasis Recurrent Neural Network (RNN) yang dirancang untuk memproses data berurutan seperti teks. Keunggulan LSTM terletak pada kemampuannya dalam mengingat informasi jangka panjang dan menghindari permasalahan umum pada RNN seperti vanishing gradient. Hal ini sangat penting dalam analisis sentimen karena konteks dari suatu kata sangat dipengaruhi oleh kata-kata sebelumnya.

Apa itu NLTK?

NLTK (Natural Language Toolkit) adalah salah satu pustaka Python paling populer dalam pemrosesan bahasa alami. NLTK menyediakan berbagai fitur seperti tokenisasi, stopword removal, stemming, dan lainnya yang memudahkan proses preprocessing data teks sebelum dianalisis lebih lanjut.

Mengapa LSTM dan NLTK Cocok untuk Analisis Sentimen?

LSTM efektif dalam memahami struktur kalimat dan konteks emosional dari teks, menjadikannya cocok untuk membedakan antara komentar positif dan negatif.

NLTK membantu menyiapkan data teks dalam bentuk yang bersih dan terstruktur, yang penting untuk meningkatkan akurasi model.

Kombinasi dari keduanya memungkinkan proses analisis sentimen berjalan lebih akurat dan efisien.
""")

if section.startswith("Section 1"):
    show_game_description(game_choice)
    show_sentiment_charts(df, game_choice)

elif section.startswith("Section 2"):
    show_wordclouds(df)

elif section.startswith("Section 3"):
    st.subheader("ðŸ§ª Uji Coba Model Sentimen")
    user_input = st.text_input("Masukkan kalimat komentar:")
    if user_input:
        analyze_user_input(user_input, model, tokenizer)
